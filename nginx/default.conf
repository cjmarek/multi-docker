# this is where routing rules for nginx come from
# We are using this nginx server as a common backend to direct routing
# By default, React apps use port 3000.
# this is port 3000 inside the container,
# Note, client is the name we are using in the docker-compose.yml file
upstream client {
  server client:3000;
}
# Note, api is the name we are using in the docker-compose.yml file
# In this project, we are using port 5000 for Express
# this is port 5000 inside the container,
upstream apifoo {
  server apifoo:5000;
}

# Another stupid thing that confuses everything, we use api as part of the route name, and we also use api as the server container name. So I decided to rename the
# server container name to apifoo. Just to show api means different things.

# this is port 80 inside the nginx container, it can be anything from 0 to infinity.
# On this network, there are requests being made by the React application to retrieve the index.html and the App.js (he mis-labeled as main.js)
# Apparently, requests from React are '/' by default at start up, and are taken care of here by 'location /' to retrieve the index.html and the App.js

# Since nginx is the web server, that then is the start of everything. So we use https://localhost:3050 to kick off the application.
# Well, in the Docker-compose file, we decided the outside Port to be 3050 and then we map it to Port 80
# and Port 80 is this container. So that means any http requests that come from 3050 get mapped to 80. It feels
# like port 3050 is the kick-off of this application rather that 3000 that I would expect for a React application.
#  But he wanted nginx to be the arbiter of the application. nginx is after all the actual web server instead of the 
# development server that I normally deal with. The 'client', (React application) is mentioned in line 6 as being at port 3000, which React always uses by default.
# 
# The Express 'server' that is identified as 'api' in the docker-compose.yml is assigned port 5000, at the bottom of server container index.js!!!!
# there are 3 requests made from the React app, and all of them have 'api' as part of the route. So those requests come in here.
# After the 'api' gets stripped off here, then next, the http requests now resemble the routes in the server container,
# so now the server container will pick up these 'groomed' requests.
# according to his Complex-Checkpoint.png, any requests coming here with just '/', retrieve React stuff like index.html and App.js (he mis-labeled as main.js)
server {
  listen 80;
# routing rules, mentioning the upstream server names
  location / {
    proxy_pass http://client;
  }
# This route (and above route) goes to the client endpoints. 
# If I have commented this out, and it can still work without it. This has something to do with the Web Socket fix, intended to make the app more efficient
# This allows the browser and the running React application inside of it wants to maintain a connection to the dev react server that it likes to have.
# We do NOT need this to be present in the Production version of the Dockerfile
  location /ws {
    proxy_pass http://client;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
  }
# This route goes to the api endpoints
# routing rule that chops off the api part of the request path
# Note, api is the container name we are using in the docker-compose.yml file
  location /api {
    rewrite /api/(.*) /$1 break;
    proxy_pass http://apifoo;
  }
}